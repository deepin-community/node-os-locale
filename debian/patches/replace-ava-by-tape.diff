Description: replace ava by tape
Author: Xavier Guimard <yadd@debian.org>
Forwarded: not-needed
Last-Update: 2020-12-23

--- a/test.js
+++ b/test.js
@@ -1,5 +1,5 @@
-import test from 'ava';
-import proxyquireBase from 'proxyquire';
+const test = require('tape');
+const proxyquireBase = require('proxyquire');
 
 const proxyquire = proxyquireBase.noPreserveCache().noCallThru();
 
@@ -24,25 +24,26 @@
 
 const cache = {};
 
-test.beforeEach(() => {
+const before = function () {
 	cache.env = process.env;
 	cache.platform = process.platform;
 
 	process.env = {};
 	setPlatform('linux');
-});
+};
 
-test.afterEach.always(() => {
+const after = function() {
 	process.env = cache.env;
 	setPlatform(cache.platform);
-});
+};
 
 /**
  * We're running tests in serial because we're mutating global state and we need to keep
  * the tests separated.
  */
 
-test.serial('Async retrieve locale from LC_ALL env as 1st priority', async t => {
+test('Async retrieve locale from LC_ALL env as 1st priority', async t => {
+	before();
 	process.env.LANGUAGE = 'en-GB1';
 	process.env.LANG = 'en-GB2';
 	process.env.LC_MESSAGES = 'en-GB3';
@@ -51,9 +52,12 @@
 	const locale = await proxyquire('.', {execa: noExeca(t)})();
 
 	t.is(locale, 'en-GB4');
+	t.end();
+    after();
 });
 
-test.serial('Async retrieve locale from LC_MESSAGES env as 2st priority', async t => {
+test('Async retrieve locale from LC_MESSAGES env as 2st priority', async t => {
+	before();
 	process.env.LANGUAGE = 'en-GB1';
 	process.env.LANG = 'en-GB2';
 	process.env.LC_MESSAGES = 'en-GB3';
@@ -61,26 +65,35 @@
 	const locale = await proxyquire('.', {execa: noExeca(t)})();
 
 	t.is(locale, 'en-GB3');
+	t.end();
+    after();
 });
 
-test.serial('Async retrieve locale from LANG env as 3st priority', async t => {
+test('Async retrieve locale from LANG env as 3st priority', async t => {
+	before();
 	process.env.LANGUAGE = 'en-GB1';
 	process.env.LANG = 'en-GB2';
 
 	const locale = await proxyquire('.', {execa: noExeca(t)})();
 
 	t.is(locale, 'en-GB2');
+	t.end();
+    after();
 });
 
-test.serial('Async retrieve locale from LANGUAGE env as 4st priority', async t => {
+test('Async retrieve locale from LANGUAGE env as 4st priority', async t => {
+	before();
 	process.env.LANGUAGE = 'en-GB1';
 
 	const locale = await proxyquire('.', {execa: noExeca(t)})();
 
 	t.is(locale, 'en-GB1');
+	t.end();
+    after();
 });
 
-test.serial('Sync retrieve locale from LC_ALL env as 1st priority', async t => {
+test('Sync retrieve locale from LC_ALL env as 1st priority', async t => {
+	before();
 	process.env.LANGUAGE = 'en-GB1';
 	process.env.LANG = 'en-GB2';
 	process.env.LC_MESSAGES = 'en-GB3';
@@ -89,9 +102,12 @@
 	const locale = await proxyquire('.', {execa: noExeca(t)}).sync();
 
 	t.is(locale, 'en-GB4');
+	t.end();
+    after();
 });
 
-test.serial('Sync retrieve locale from LC_MESSAGES env as 2st priority', async t => {
+test('Sync retrieve locale from LC_MESSAGES env as 2st priority', async t => {
+	before();
 	process.env.LANGUAGE = 'en-GB1';
 	process.env.LANG = 'en-GB2';
 	process.env.LC_MESSAGES = 'en-GB3';
@@ -99,90 +115,123 @@
 	const locale = await proxyquire('.', {execa: noExeca(t)}).sync();
 
 	t.is(locale, 'en-GB3');
+	t.end();
+    after();
 });
 
-test.serial('Sync retrieve locale from LANG env as 3st priority', async t => {
+test('Sync retrieve locale from LANG env as 3st priority', async t => {
+	before();
 	process.env.LANGUAGE = 'en-GB1';
 	process.env.LANG = 'en-GB2';
 
 	const locale = await proxyquire('.', {execa: noExeca(t)}).sync();
 
 	t.is(locale, 'en-GB2');
+	t.end();
+    after();
 });
 
-test.serial('Sync retrieve locale from LANGUAGE env as 4st priority', async t => {
+test('Sync retrieve locale from LANGUAGE env as 4st priority', async t => {
+	before();
 	process.env.LANGUAGE = 'en-GB1';
 
 	const locale = await proxyquire('.', {execa: noExeca(t)}).sync();
 
 	t.is(locale, 'en-GB1');
+	t.end();
+    after();
 });
 
-test.serial('Async normalises locale', async t => {
+test('Async normalises locale', async t => {
+	before();
 	process.env.LC_ALL = 'en_GB';
 
 	const locale = await proxyquire('.', {execa: noExeca(t)})();
 
 	t.is(locale, 'en-GB');
+	t.end();
+    after();
 });
 
-test.serial('Sync normalises locale', async t => {
+test('Sync normalises locale', async t => {
+	before();
 	process.env.LC_ALL = 'en_GB';
 
 	const locale = await proxyquire('.', {execa: noExeca(t)}).sync();
 
 	t.is(locale, 'en-GB');
+	t.end();
+    after();
 });
 
-test.serial('Async fallback locale when env variables missing and spawn=false ', async t => {
+test('Async fallback locale when env variables missing and spawn=false ', async t => {
+	before();
 	const locale = await proxyquire('.', {execa: noExeca(t)})({spawn: false});
 
 	t.is(locale, expectedFallback, 'Locale did not match expected fallback');
+	t.end();
+    after();
 });
 
-test.serial('Sync fallback locale when env variables missing and spawn=false ', async t => {
+test('Sync fallback locale when env variables missing and spawn=false ', async t => {
+	before();
 	const locale = await proxyquire('.', {execa: noExeca(t)}).sync({spawn: false});
 
 	t.is(locale, expectedFallback, 'Locale did not match expected fallback');
+	t.end();
+    after();
 });
 
-test.serial('Async handle darwin locale ', async t => {
+test('Async handle darwin locale ', async t => {
+	before();
 	setPlatform('darwin');
 	const execa = asyncExeca(cmd => cmd === 'defaults' ? 'en-GB' : ['en-US', 'en-GB']);
 
 	const locale = await proxyquire('.', {execa})();
 
 	t.is(locale, 'en-GB');
+	t.end();
+    after();
 });
 
-test.serial('Sync handle darwin locale ', async t => {
+test('Sync handle darwin locale ', async t => {
+	before();
 	setPlatform('darwin');
 	const execa = syncExeca(cmd => cmd === 'defaults' ? 'en-GB' : ['en-US', 'en-GB']);
 
 	const locale = await proxyquire('.', {execa}).sync();
 
 	t.is(locale, 'en-GB');
+	t.end();
+    after();
 });
 
-test.serial('Async handle win32 locale ', async t => {
+test('Async handle win32 locale ', async t => {
+	before();
 	setPlatform('win32');
 	const execa = asyncExeca(() => 'Locale\n0809\n');
 
 	const locale = await proxyquire('.', {execa})();
 
 	t.is(locale, 'en-GB');
+	t.end();
+    after();
 });
 
-test.serial('Sync handle win32 locale ', async t => {
+test('Sync handle win32 locale ', async t => {
+	before();
 	setPlatform('win32');
 	const execa = syncExeca(() => 'Locale\n0809\n');
 
 	const locale = await proxyquire('.', {execa}).sync();
 
 	t.is(locale, 'en-GB');
+	t.end();
+    after();
 });
 
-test.serial('Async handle linux locale ', async t => {
+test('Async handle linux locale ', async t => {
+	before();
 	setPlatform('linux');
 	const execa = asyncExeca(() => `LANG="en-GB"
 LC_COLLATE="en_GB"
@@ -196,9 +245,12 @@
 	const locale = await proxyquire('.', {execa})();
 
 	t.is(locale, 'en-GB');
+	t.end();
+    after();
 });
 
-test.serial('Sync handle linux locale ', async t => {
+test('Sync handle linux locale ', async t => {
+	before();
 	setPlatform('linux');
 	const execa = syncExeca(() => `LANG="en-GB"
 LC_COLLATE="en_GB"
@@ -212,4 +264,6 @@
 	const locale = await proxyquire('.', {execa}).sync();
 
 	t.is(locale, 'en-GB');
+	t.end();
+    after();
 });
